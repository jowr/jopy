import jinja2
import os
import requests
import json
from distutils.version import LooseVersion #, StrictVersion
import codecs
import datetime
from jinja2.environment import Environment

template_dir = os.path.dirname(os.path.abspath(__file__))
target_dir = os.path.abspath(os.path.join(os.path.dirname(__file__),'..'))

author = 'Jorrit Wronski'
email = 'jopy@jorrit.org'

tpl_first_line = "{0} CAUTION: This file is automatically generated from {1}, do not edit it manually\n"

mtime = datetime.datetime.fromtimestamp(os.path.getmtime(__file__)).strftime('%Y-%m-%d %H:%M')

bas_pkgs = ["conda-env", "conda-build", "binstar", "binstar-build", "jinja2"]

cus_pkgs = ["numpy", "scipy", "matplotlib", "pandas"]
pip_cus_pkgs = ["coolprop", "texttable"]

dev_pkgs = cus_pkgs + ["pip", "pyyaml", "nose", "sphinx", "jinja2", "tox"]
pip_dev_pkgs = pip_cus_pkgs + ["coveralls", "nose-cov", "codecov"]

os.chdir(template_dir)
loader = jinja2.FileSystemLoader(['.','jopy'])
environment = jinja2.Environment(loader=loader)

tags = {}
#r = requests.get('https://api.github.com/repos/coolprop/coolprop/tags')
r = requests.get('https://api.github.com/repos/jowr/jopy/tags')
if(r.ok):
    item = json.loads(r.text or r.content)
    for com in item:
        tags[com['name']] = com['commit']['sha']

#tag = sorted(tags.keys())[-1]
tag = "v0.0.1"
if tag[0]=='v': version = tag[1:]
else: version = tag

local_dict = dict(
  author = author,
  email  = email,
  version = version,
  bas_pkgs = bas_pkgs,
  cus_pkgs = cus_pkgs,
  pip_cus_pkgs = pip_cus_pkgs,
  dev_pkgs = dev_pkgs,
  pip_dev_pkgs = pip_dev_pkgs
)

target = 'travis.yml'
template_path = target+'.tpl'
template = environment.get_template(template_path)
f = codecs.open(os.path.join(target_dir,"."+target),mode='wb',encoding='utf-8')
f.write(tpl_first_line.format("# "+mtime,template_path))
f.write(template.render(**local_dict))
f.close()

target = 'appveyor.yml'
template_path = target+'.tpl'
template = environment.get_template(template_path)
f = codecs.open(os.path.join(target_dir,target),mode='wb',encoding='utf-8')
f.write(tpl_first_line.format("# "+mtime,template_path))
f.write(template.render(**local_dict))
f.close()

target = 'requirements.txt'
template_path = target+'.tpl'
template = environment.get_template(template_path)
f = codecs.open(os.path.join(target_dir,target),mode='wb',encoding='utf-8')
f.write(tpl_first_line.format("# "+mtime,template_path))
f.write(template.render(**local_dict))
f.close()

target = 'setup.py'
template_path = target+'.tpl'
template = environment.get_template(template_path)
f = codecs.open(os.path.join(target_dir,target),mode='wb',encoding='utf-8')
f.write("#!/usr/bin/env python \n")
f.write(tpl_first_line.format("# "+mtime,template_path))
f.write(template.render(**local_dict))
f.close()

target = '__init__.py'
template_path = target+'.tpl'
template = environment.get_template(template_path)
f = codecs.open(os.path.join(target_dir,'jopy',target),mode='wb',encoding='utf-8')
f.write(tpl_first_line.format("# "+mtime,__file__))
f.write(template.render(**local_dict))
f.close()

target = 'meta.yaml'
template_path = target+'.tpl'
template = environment.get_template(template_path)
f = codecs.open(os.path.join(target_dir,target),mode='wb',encoding='utf-8')
f.write(tpl_first_line.format("# "+mtime,template_path))
f.write(template.render(**local_dict))
f.close()

tpl_string = """
binstar login
{% for pkg in pip_dev_pkgs %}
conda skeleton pypi {{ pkg }}
conda build {{ pkg }}
binstar upload {{ pkg }}
{% endfor %}
"""
#binstar login
#conda skeleton pypi somepypipackage
#conda build somepypipackage
#binstar upload somepypipackage
#conda config --add channels jowr
#conda install --use-local option

target = 'maintain_repo.bsh'
template =Environment().from_string(tpl_string)
f = codecs.open(os.path.join(target_dir,target),mode='wb',encoding='utf-8')
f.write(tpl_first_line.format("# "+mtime,'builder.py'))
f.write(template.render(**local_dict))
f.close()

target = 'maintain_repo.bat'
template =Environment().from_string(tpl_string)
f = codecs.open(os.path.join(target_dir,target),mode='wb',encoding='utf-8')
f.write(tpl_first_line.format(":: "+mtime,'builder.py'))
f.write(template.render(**local_dict))
f.close()

















#target = 'meta.yaml'
#template = environment.get_template(os.path.join(template_dir,target+'.tpl'))
#tags = {}
#r = requests.get('https://api.github.com/repos/coolprop/coolprop/tags')
#if(r.ok):
    #item = json.loads(r.text or r.content)
    #for com in item:
        #tags[com['name']] = com['commit']['sha']

##tag = sorted(tags.keys())[-1]

##for tag in sorted(tags.keys()):
##    print tag
##     r = requests.get('https://api.github.com/repos/coolprop/coolprop/git/tags/'+tags[tag])
##     if(r.ok):
##         items = json.loads(r.text or r.content)
##         print str(items)

##def cmp(x,y): return LooseVersion(x).__cmp__(y)
##tag = sorted(tags.keys(),cmp=cmp)[-1]
#tag = sorted(tags.keys())[-1]
##from pkg_resources import parse_version
##>>> parse_version('1.4') > parse_version('1.4-rc2')
#if tag[0]=='v': version = tag[1:]
#else: version = tag

#f = codecs.open(os.path.join(target_dir,target),mode='wb',encoding='utf-8')
##f = open(name,mode='w')
#f.write(template.render(version=version,tag=tag,pkgs=pkgs))
#f.close()